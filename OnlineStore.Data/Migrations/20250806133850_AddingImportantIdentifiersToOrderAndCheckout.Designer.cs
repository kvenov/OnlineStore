// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStore.Data;

#nullable disable

namespace OnlineStore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250806133850_AddingImportantIdentifiersToOrderAndCheckout")]
    partial class AddingImportantIdentifiersToOrderAndCheckout
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The Address identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address Country");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique guest identifier for address");

                    b.Property<bool>("IsBillingAddress")
                        .HasColumnType("bit")
                        .HasComment("The Address additional identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShippingAddress")
                        .HasColumnType("bit")
                        .HasComment("The Address additional identifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Address PhoneNumber");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The Address Street");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The Address ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", t =>
                        {
                            t.HasComment("The Addresses of the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Registration date of the user");

                    b.Property<int?>("DefaultBillingAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultPaymentDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultPaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("NVARCHAR")
                        .HasComment("User Fullname");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultPaymentDetailsId");

                    b.HasIndex("DefaultPaymentMethodId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("Users in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Article identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Article content");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Article image url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Article short info");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Article date of creation");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Article title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsPublished");

                    b.HasIndex("PublishedDate");

                    b.HasIndex("Title");

                    b.ToTable("Articles", t =>
                        {
                            t.HasComment("Articles in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Article category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Article category description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Article category name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ArticleCategories", t =>
                        {
                            t.HasComment("Article categories in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Brand identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Brand description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Brand short info");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Brand logo url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Brand name");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Brand website url");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands", t =>
                        {
                            t.HasComment("Brands in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Checkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Checkout id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Checkout date of complition");

                    b.Property<DateTime>("EstimatedDeliveryEnd")
                        .HasColumnType("datetime2")
                        .HasComment("Estimated delivery end date");

                    b.Property<DateTime>("EstimatedDeliveryStart")
                        .HasColumnType("datetime2")
                        .HasComment("Estimated delivery start date");

                    b.Property<string>("GuestEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Contact email (for guest)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique guest identifier for checkout");

                    b.Property<string>("GuestName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Full name (for guest)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is Checkout Completed identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Shipping option for the checkout");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("Shipping price for the checkout");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Checkout creation data");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("Checkout SubTotal");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComputedColumnSql("[ShippingPrice] + [SubTotal]", true)
                        .HasComment("Total price for the checkout");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("PaymentDetailsId")
                        .IsUnique()
                        .HasFilter("[PaymentDetailsId] IS NOT NULL");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("UserId");

                    b.ToTable("Checkouts", t =>
                        {
                            t.HasComment("The checkouts in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<int>("CheckoutId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EstimatedDeliveryEnd")
                        .HasColumnType("datetime2")
                        .HasComment("Estimated delivery end date");

                    b.Property<DateTime>("EstimatedDeliveryStart")
                        .HasColumnType("datetime2")
                        .HasComment("Estimated delivery start date");

                    b.Property<string>("GuestEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Contact email (for guest)");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique guest identifier for order");

                    b.Property<string>("GuestName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Full name (for guest)");

                    b.Property<bool>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is Order Cancelled identifier");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Is Order Completed identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Order creation date");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Order number");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingOption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Shipping option for the order");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("Shipping price for the order");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Order status");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(20, 4)
                        .HasColumnType("DECIMAL(20,4)")
                        .HasComment("Order total amount");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CheckoutId")
                        .IsUnique();

                    b.HasIndex("GuestId");

                    b.HasIndex("OrderDate");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Orders in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Order item identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Order item quantity");

                    b.Property<decimal>("Subtotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComputedColumnSql("[Quantity] * [UnitPrice]")
                        .HasComment("Order item price");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("Order item current price");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersItems", t =>
                        {
                            t.HasComment("Order items in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.PaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Payment details id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardBrand")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Payment details card brand");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Payment details card number");

                    b.Property<int>("ExpMonth")
                        .HasPrecision(2)
                        .HasColumnType("int")
                        .HasComment("Payment details card expiry data month");

                    b.Property<int>("ExpYear")
                        .HasPrecision(4)
                        .HasColumnType("int")
                        .HasComment("Payment details card expiry data year");

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Payment details card name");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Payment details payment status");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("Status");

                    b.ToTable("PaymentDetails", t =>
                        {
                            t.HasComment("The payment details of the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Payment method id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Code")
                        .HasColumnType("int")
                        .HasComment("Payment method code");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Payment method short admin info");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Payment method name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("PaymentMethods", t =>
                        {
                            t.HasComment("The payment methods in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageRating")
                        .HasPrecision(3, 2)
                        .HasColumnType("float(3)")
                        .HasComment("Product avarage rating");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Product creation data");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Product description");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("Product discount price");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Product image url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Product short info");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product name");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("Product price");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("Product quantity");

                    b.Property<int>("TotalRatings")
                        .HasColumnType("int")
                        .HasComment("Product total ratings");

                    b.HasKey("Id");

                    b.HasIndex("AverageRating");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("Price", "DiscountPrice");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Products in the store");
                        });

                    b.HasData(
                        new
                        {
                            Id = 12,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 12,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7007),
                            Description = "Men's Road Running Shoes",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/09f3dd58-91e6-4d94-a5ea-1b2c8f7e9ff0/revolution-6-road-running-shoes-8Xf5w3.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Revolution 6",
                            Price = 75.00m,
                            StockQuantity = 100,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 13,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 12,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7025),
                            Description = "Running shoes made for energy return.",
                            DiscountPrice = 170.00m,
                            ImageUrl = "https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/f228f1f8750b4a10929faf6f011c0b99_9366/Ultraboost_Light_Shoes_Black_GY9356_01_standard.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Ultraboost Light",
                            Price = 190.00m,
                            StockQuantity = 80,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 14,
                            AverageRating = 0.0,
                            BrandId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7118),
                            Description = "Men's Jeans with a modern slim cut.",
                            DiscountPrice = 69.99m,
                            ImageUrl = "https://lsco.scene7.com/is/image/lsco/levis/clothing/005120939-front-pdp.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Levi's 512 Slim Taper Fit",
                            Price = 89.95m,
                            StockQuantity = 120,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 15,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7124),
                            Description = "Comfortable fleece joggers for everyday wear.",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/9bdce8c1-1c62-40fd-84d0-d0d658d3e883/sportswear-club-fleece-joggers-QDkzGC.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Club Fleece Joggers",
                            Price = 55.00m,
                            StockQuantity = 95,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 16,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7130),
                            Description = "Men's moisture-wicking training tee.",
                            DiscountPrice = 25.00m,
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/590d39a5-36ad-434c-b073-15376b493f3a/dri-fit-training-t-shirt-Fz4gD3.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Dri-FIT Training T-Shirt",
                            Price = 30.00m,
                            StockQuantity = 150,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 17,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7141),
                            Description = "Classic Adidas t-shirt for daily wear.",
                            ImageUrl = "https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/10d12fc1e6e24c73bc03ad2d00cd6e4f_9366/Essentials_Logo_Tee_White_IC9319_01_laydown.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Essentials Tee",
                            Price = 25.00m,
                            StockQuantity = 90,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 18,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7148),
                            Description = "Comfortable crew socks for all-day wear.",
                            DiscountPrice = 15.00m,
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_1280_v1/f_auto,q_auto:eco/a4f39e13-4e96-4e8d-bc71-3476bb8ac719/everyday-plus-cushioned-training-crew-socks-JmgKcT.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Everyday Plus Cushioned Socks",
                            Price = 20.00m,
                            StockQuantity = 200,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 19,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7155),
                            Description = "Spacious backpack with modern design.",
                            DiscountPrice = 39.99m,
                            ImageUrl = "https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/39aa23ceae624ddcb6eeae8601556df5_9366/Classic_Backpack_Black_FM6876_01_standard.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Classic Backpack",
                            Price = 45.00m,
                            StockQuantity = 80,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 20,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7161),
                            Description = "Nike Men’s Essential Grey Hoodie",
                            ImageUrl = "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/fb26574f-572f-463a-a63d-df361188ed62/sportswear-club-fleece-mens-graphic-pullover-hoodie-1WcMnq.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Grey Hoodie",
                            Price = 74.99m,
                            StockQuantity = 70,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 21,
                            AverageRating = 0.0,
                            BrandId = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7171),
                            Description = "Levi's Men's Relaxed Fit Graphic T-Shirt",
                            DiscountPrice = 24.99m,
                            ImageUrl = "https://lsco.scene7.com/is/image/lsco/161430124-front-pdp.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Levi's Black Graphic Tee",
                            Price = 29.99m,
                            StockQuantity = 120,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 22,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7177),
                            Description = "Nike Men's Navy Training Shorts",
                            DiscountPrice = 34.99m,
                            ImageUrl = "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/62231792-14aa-47c4-b5e4-ef59ec69a4ff/dri-fit-mens-training-shorts-kFv4LN.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Navy Shorts",
                            Price = 39.99m,
                            StockQuantity = 90,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 23,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7183),
                            Description = "Adidas Essentials Grey Sweatshirt",
                            ImageUrl = "https://assets.adidas.com/images/h_840,f_auto,q_auto,fl_lossy,c_fill,g_auto/6b0dfdfd66e24667be28af6400c33688_9366/Essentials_Logo_Fleece_Sweatshirt_Grey_IC6779_01_laydown.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Grey Sweatshirt",
                            Price = 54.99m,
                            StockQuantity = 85,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 24,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7189),
                            Description = "Nike Everyday Plus Cushioned Ankle Socks",
                            ImageUrl = "https://static.nike.com/a/images/t_default/e30dcf40-0325-43aa-bfae-3e8a4cf2cb92/everyday-plus-cushioned-training-ankle-socks-M9CcJm.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Blue Ankle Socks",
                            Price = 14.99m,
                            StockQuantity = 300,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 25,
                            AverageRating = 0.0,
                            BrandId = 3,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7196),
                            Description = "Levi's Original Trucker Denim Jacket",
                            DiscountPrice = 79.99m,
                            ImageUrl = "https://lsco.scene7.com/is/image/lsco/723340178-front-pdp.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Levi's Blue Denim Jacket",
                            Price = 89.99m,
                            StockQuantity = 45,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 26,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 12,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7203),
                            Description = "Adidas Ultraboost Light White Running Shoes",
                            DiscountPrice = 159.99m,
                            ImageUrl = "https://assets.adidas.com/images/w_600,f_auto,q_auto/bdf5b9ecbb54425aab59af6d0113e5c7_9366/Ultraboost_Light_Shoes_White_GW6723_01_standard.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Sporty White Shoes",
                            Price = 189.99m,
                            StockQuantity = 60,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 27,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7277),
                            Description = "Nike Brasilia Small Training Backpack",
                            ImageUrl = "https://static.nike.com/a/images/t_default/e126b819-b305-40a0-aeb4-36e8c9ee5ce2/brasilia-small-training-backpack-18l-LZgMnm.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Red Sports Backpack",
                            Price = 39.99m,
                            StockQuantity = 130,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 28,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 13,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7283),
                            Description = "Nike Air Force 1 '07 Men's Shoes",
                            ImageUrl = "https://static.nike.com/a/images/t_default/1bbebd34-3fe2-4dc7-9b98-80f9932f5a75/air-force-1-07-mens-shoes-WrLlWX.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Lifestyle Black Shoes",
                            Price = 114.99m,
                            StockQuantity = 95,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 29,
                            AverageRating = 0.0,
                            BrandId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7293),
                            Description = "Levi's 511 Slim Fit Men's Jeans",
                            DiscountPrice = 49.99m,
                            ImageUrl = "https://lsco.scene7.com/is/image/lsco/045114406-front-pdp.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Levi's Slim Fit Jeans",
                            Price = 59.99m,
                            StockQuantity = 100,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 30,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7299),
                            Description = "Nike Dri-FIT Men’s Training T-Shirt",
                            ImageUrl = "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/1797b3f1-9e7a-42cb-8d92-1c9e7cf9a93c/dri-fit-mens-training-t-shirt-Q7zT4k.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Dri-FIT T-Shirt",
                            Price = 34.99m,
                            StockQuantity = 115,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 31,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7325),
                            Description = "A soft cotton t-shirt with classic Nike branding.",
                            ImageUrl = "https://static.nike.com/a/images/t_PDP_936_v1/f_auto,q_auto:eco/437747c8-ed66-457f-9a03-648dab68ebf0/W+NSW+ESSNTL+TOP+HBR.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Sportswear Women's Tee",
                            Price = 34.99m,
                            StockQuantity = 120,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 32,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7331),
                            Description = "Breathable and sustainable tank top ideal for workouts.",
                            DiscountPrice = 24.99m,
                            ImageUrl = "https://media.strefatenisa.com.pl/public/media/66/cf/8a/1721077427/adidas-match-tank-top-w-white-black-1.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Primeblue Women's Tank",
                            Price = 29.99m,
                            StockQuantity = 100,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 33,
                            AverageRating = 0.0,
                            BrandId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7338),
                            Description = "Figure-flattering high-rise denim made to shape and contour.",
                            ImageUrl = "https://lsco.scene7.com/is/image/lsco/188820047-front-pdp",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Levi's Women's 721 High Rise Skinny Jeans",
                            Price = 69.99m,
                            StockQuantity = 90,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 34,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7343),
                            Description = "Soft fleece in a relaxed fit for all-day comfort.",
                            ImageUrl = "https://www.nike.com.kw/dw/image/v2/BDVB_PRD/on/demandware.static/-/Sites-akeneo-master-catalog/default/dw7b0ab06e/nk/a29/6/0/c/f/d/a2960cfd_ba5b_4f09_83c5_712deadc351e.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Phoenix Fleece Women's Sweatshirt",
                            Price = 54.99m,
                            StockQuantity = 110,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 35,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 12,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7349),
                            Description = "Lightweight and responsive shoes for daily running.",
                            DiscountPrice = 49.99m,
                            ImageUrl = "https://i.sportisimo.com/products/images/1625/1625218/700x700/nike-downshifter-12_3.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Downshifter 12 Women's Running Shoes",
                            Price = 59.99m,
                            StockQuantity = 100,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 36,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7354),
                            Description = "Stylish peach crop tee made with soft cotton.",
                            ImageUrl = "https://cms-cdn.thesolesupplier.co.uk/2021/06/adidas-originals-3-stripes-essential-crop-t-shirt-orange-tsw_w672_h672.jpg.webp",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Essentials Crop Tee",
                            Price = 27.99m,
                            StockQuantity = 85,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 37,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7359),
                            Description = "Moisture-wicking shorts for training or casual wear.",
                            DiscountPrice = 29.99m,
                            ImageUrl = "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/a0293382-4be4-4b65-8e3a-481ba7a2cc07/W+NK+ONE+DF+HR+3IN+2N1+SHORT.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Women's Dri-FIT Shorts",
                            Price = 39.99m,
                            StockQuantity = 95,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 38,
                            AverageRating = 0.0,
                            BrandId = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7365),
                            Description = "Tight-fitting denim for a sleek, modern silhouette.",
                            ImageUrl = "https://m.media-amazon.com/images/I/41eZ5ojjPYL._SY1000_.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Levi's Women's High Rise Super Skinny",
                            Price = 74.99m,
                            StockQuantity = 80,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 39,
                            AverageRating = 0.0,
                            BrandId = 2,
                            CategoryId = 13,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7371),
                            Description = "Lifestyle sneakers with a minimalist look and comfortable feel.",
                            DiscountPrice = 54.99m,
                            ImageUrl = "https://static.glami.bg/img/800x800bt/424662600-snik-rsi-adidas-grand-court-2-0-shoes-id4483-byal.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Adidas Grand Court 2.0 Women's Shoes",
                            Price = 64.99m,
                            StockQuantity = 95,
                            TotalRatings = 0
                        },
                        new
                        {
                            Id = 40,
                            AverageRating = 0.0,
                            BrandId = 1,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 38, 44, 587, DateTimeKind.Utc).AddTicks(7377),
                            Description = "Iconic windbreaker jacket with water-resistant fabric.",
                            DiscountPrice = 74.99m,
                            ImageUrl = "https://static.nike.com/a/images/t_default/0eea8284-8970-4e9d-8ab7-2bff450c7b7c/W+NSW+NK+LIQ+SHINE+WR+JKT.png",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Nike Windrunner Women's Jacket",
                            Price = 84.99m,
                            StockQuantity = 90,
                            TotalRatings = 0
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product category description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product category name");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ProductCategories", t =>
                        {
                            t.HasComment("Product categories in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product details identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CareInstructions")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Product details care instructions");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product details color");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product details country of origin");

                    b.Property<string>("Fit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Product details fit");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Product details gender");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product details material");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("SizeGuideUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasComment("Product details size guide url");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product details style");

                    b.Property<decimal>("Weight")
                        .HasMaxLength(50)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product details weight");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductDetails", t =>
                        {
                            t.HasComment("Details for a certain product");
                        });

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CareInstructions = "Machine wash cold, tumble dry low.",
                            Color = "Black",
                            CountryOfOrigin = "Vietnam",
                            Fit = "Regular",
                            Gender = "Men",
                            Material = "Polyester",
                            ProductId = 12,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Sport",
                            Weight = 0.45m
                        },
                        new
                        {
                            Id = 11,
                            CareInstructions = "Spot clean with mild detergent.",
                            Color = "White",
                            CountryOfOrigin = "Indonesia",
                            Fit = "Regular",
                            Gender = "Unisex",
                            Material = "Textile",
                            ProductId = 13,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Running",
                            Weight = 0.9m
                        },
                        new
                        {
                            Id = 12,
                            CareInstructions = "Wash inside out with like colors.",
                            Color = "Indigo",
                            CountryOfOrigin = "Mexico",
                            Fit = "Slim",
                            Gender = "Men",
                            Material = "Denim",
                            ProductId = 14,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Casual",
                            Weight = 0.75m
                        },
                        new
                        {
                            Id = 13,
                            CareInstructions = "Machine wash warm.",
                            Color = "Grey",
                            CountryOfOrigin = "China",
                            Fit = "Regular",
                            Gender = "Men",
                            Material = "Fleece",
                            ProductId = 15,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Streetwear",
                            Weight = 0.65m
                        },
                        new
                        {
                            Id = 14,
                            CareInstructions = "Do not bleach.",
                            Color = "Black",
                            CountryOfOrigin = "Thailand",
                            Fit = "Athletic",
                            Gender = "Men",
                            Material = "Cotton",
                            ProductId = 16,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Sport",
                            Weight = 0.35m
                        },
                        new
                        {
                            Id = 15,
                            CareInstructions = "Machine wash cold, iron if needed.",
                            Color = "White",
                            CountryOfOrigin = "Bangladesh",
                            Fit = "Classic",
                            Gender = "Unisex",
                            Material = "Cotton",
                            ProductId = 17,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Casual",
                            Weight = 0.4m
                        },
                        new
                        {
                            Id = 16,
                            CareInstructions = "Wash in cold water.",
                            Color = "Black",
                            CountryOfOrigin = "India",
                            Fit = "Tight",
                            Gender = "Unisex",
                            Material = "Cotton Blend",
                            ProductId = 18,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Training",
                            Weight = 0.15m
                        },
                        new
                        {
                            Id = 17,
                            CareInstructions = "Hand wash.",
                            Color = "Blue",
                            CountryOfOrigin = "China",
                            Fit = "Standard",
                            Gender = "Unisex",
                            Material = "Polyester",
                            ProductId = 19,
                            SizeGuideUrl = "https://example.com/size-guide",
                            Style = "Urban",
                            Weight = 0.6m
                        },
                        new
                        {
                            Id = 18,
                            CareInstructions = "Machine wash cold",
                            Color = "Grey",
                            CountryOfOrigin = "Vietnam",
                            Fit = "Regular",
                            Gender = "Men",
                            Material = "Cotton",
                            ProductId = 20,
                            SizeGuideUrl = "https://www.nike.com/size-fit/men",
                            Style = "Pullover",
                            Weight = 0.65m
                        },
                        new
                        {
                            Id = 19,
                            CareInstructions = "Machine wash",
                            Color = "Black",
                            CountryOfOrigin = "Bangladesh",
                            Fit = "Relaxed",
                            Gender = "Men",
                            Material = "Cotton",
                            ProductId = 21,
                            SizeGuideUrl = "https://www.levi.com/size-guide",
                            Style = "Crewneck",
                            Weight = 0.3m
                        },
                        new
                        {
                            Id = 20,
                            CareInstructions = "Machine wash cold",
                            Color = "Navy",
                            CountryOfOrigin = "Thailand",
                            Fit = "Regular",
                            Gender = "Men",
                            Material = "Polyester",
                            ProductId = 22,
                            SizeGuideUrl = "https://www.nike.com/size-fit/men",
                            Style = "Athletic",
                            Weight = 0.25m
                        },
                        new
                        {
                            Id = 21,
                            CareInstructions = "Machine wash warm",
                            Color = "Grey",
                            CountryOfOrigin = "Indonesia",
                            Fit = "Loose",
                            Gender = "Unisex",
                            Material = "Fleece",
                            ProductId = 23,
                            SizeGuideUrl = "https://www.adidas.com/us/help/size_charts",
                            Style = "Pullover",
                            Weight = 0.7m
                        },
                        new
                        {
                            Id = 22,
                            CareInstructions = "Machine wash cold",
                            Color = "Blue",
                            CountryOfOrigin = "China",
                            Fit = "Snug",
                            Gender = "Unisex",
                            Material = "Cotton/Polyester",
                            ProductId = 24,
                            SizeGuideUrl = "https://www.nike.com/size-fit/unisex",
                            Style = "Low cut",
                            Weight = 0.15m
                        },
                        new
                        {
                            Id = 23,
                            CareInstructions = "Machine wash cold",
                            Color = "Blue",
                            CountryOfOrigin = "Mexico",
                            Fit = "Regular",
                            Gender = "Men",
                            Material = "Denim",
                            ProductId = 25,
                            SizeGuideUrl = "https://www.levi.com/size-guide",
                            Style = "Trucker",
                            Weight = 1.2m
                        },
                        new
                        {
                            Id = 24,
                            CareInstructions = "Wipe with damp cloth",
                            Color = "White",
                            CountryOfOrigin = "Vietnam",
                            Fit = "True to size",
                            Gender = "Men",
                            Material = "Textile",
                            ProductId = 26,
                            SizeGuideUrl = "https://www.adidas.com/us/help/size_charts",
                            Style = "Running",
                            Weight = 0.9m
                        },
                        new
                        {
                            Id = 25,
                            CareInstructions = "Wipe clean",
                            Color = "Red",
                            CountryOfOrigin = "China",
                            Fit = "Compact",
                            Gender = "Unisex",
                            Material = "Polyester",
                            ProductId = 27,
                            SizeGuideUrl = "https://www.nike.com/size-fit/bags",
                            Style = "Training",
                            Weight = 0.8m
                        },
                        new
                        {
                            Id = 26,
                            CareInstructions = "Wipe with damp cloth",
                            Color = "Black",
                            CountryOfOrigin = "Vietnam",
                            Fit = "True to size",
                            Gender = "Men",
                            Material = "Leather",
                            ProductId = 28,
                            SizeGuideUrl = "https://www.nike.com/size-fit/mens-shoes",
                            Style = "Lifestyle",
                            Weight = 1.0m
                        },
                        new
                        {
                            Id = 27,
                            CareInstructions = "Machine wash cold",
                            Color = "Blue",
                            CountryOfOrigin = "Mexico",
                            Fit = "Slim",
                            Gender = "Men",
                            Material = "Denim",
                            ProductId = 29,
                            SizeGuideUrl = "https://www.levi.com/size-guide",
                            Style = "Jeans",
                            Weight = 1.1m
                        },
                        new
                        {
                            Id = 28,
                            CareInstructions = "Machine wash cold",
                            Color = "Black",
                            CountryOfOrigin = "Thailand",
                            Fit = "Athletic",
                            Gender = "Men",
                            Material = "Polyester",
                            ProductId = 30,
                            SizeGuideUrl = "https://www.nike.com/size-fit/mens-tops",
                            Style = "Training",
                            Weight = 0.25m
                        },
                        new
                        {
                            Id = 29,
                            CareInstructions = "Machine wash cold",
                            Color = "Black",
                            CountryOfOrigin = "Vietnam",
                            Fit = "Relaxed",
                            Gender = "Female",
                            Material = "Cotton",
                            ProductId = 31,
                            SizeGuideUrl = "https://www.nike.com/size-fit",
                            Style = "Casual",
                            Weight = 0.25m
                        },
                        new
                        {
                            Id = 30,
                            CareInstructions = "Wash with similar colors",
                            Color = "White",
                            CountryOfOrigin = "Cambodia",
                            Fit = "Athletic",
                            Gender = "Female",
                            Material = "Polyester",
                            ProductId = 32,
                            SizeGuideUrl = "https://www.adidas.com/size-chart",
                            Style = "Sport",
                            Weight = 0.20m
                        },
                        new
                        {
                            Id = 31,
                            CareInstructions = "Wash inside out",
                            Color = "Blue",
                            CountryOfOrigin = "Mexico",
                            Fit = "Skinny",
                            Gender = "Female",
                            Material = "Denim",
                            ProductId = 33,
                            SizeGuideUrl = "https://www.levi.com/size-guide",
                            Style = "Streetwear",
                            Weight = 0.60m
                        },
                        new
                        {
                            Id = 32,
                            CareInstructions = "Do not bleach",
                            Color = "Pink",
                            CountryOfOrigin = "Indonesia",
                            Fit = "Loose",
                            Gender = "Female",
                            Material = "Cotton Blend",
                            ProductId = 34,
                            SizeGuideUrl = "https://www.nike.com/size-fit",
                            Style = "Lounge",
                            Weight = 0.50m
                        },
                        new
                        {
                            Id = 33,
                            CareInstructions = "Clean with soft brush",
                            Color = "Grey",
                            CountryOfOrigin = "China",
                            Fit = "Regular",
                            Gender = "Female",
                            Material = "Mesh",
                            ProductId = 35,
                            SizeGuideUrl = "https://www.nike.com/size-fit",
                            Style = "Running",
                            Weight = 0.70m
                        },
                        new
                        {
                            Id = 34,
                            CareInstructions = "Tumble dry low",
                            Color = "Peach",
                            CountryOfOrigin = "Bangladesh",
                            Fit = "Regular",
                            Gender = "Female",
                            Material = "Cotton",
                            ProductId = 36,
                            SizeGuideUrl = "https://www.adidas.com/size-chart",
                            Style = "Casual",
                            Weight = 0.22m
                        },
                        new
                        {
                            Id = 35,
                            CareInstructions = "Do not iron",
                            Color = "Black",
                            CountryOfOrigin = "Vietnam",
                            Fit = "Athletic",
                            Gender = "Female",
                            Material = "Polyester",
                            ProductId = 37,
                            SizeGuideUrl = "https://www.nike.com/size-fit",
                            Style = "Training",
                            Weight = 0.30m
                        },
                        new
                        {
                            Id = 36,
                            CareInstructions = "Cold wash only",
                            Color = "Dark Blue",
                            CountryOfOrigin = "India",
                            Fit = "Super Skinny",
                            Gender = "Female",
                            Material = "Denim",
                            ProductId = 38,
                            SizeGuideUrl = "https://www.levi.com/size-guide",
                            Style = "Urban",
                            Weight = 0.65m
                        },
                        new
                        {
                            Id = 37,
                            CareInstructions = "Wipe clean",
                            Color = "White",
                            CountryOfOrigin = "Indonesia",
                            Fit = "Regular",
                            Gender = "Female",
                            Material = "Synthetic Leather",
                            ProductId = 39,
                            SizeGuideUrl = "https://www.adidas.com/size-chart",
                            Style = "Lifestyle",
                            Weight = 0.75m
                        },
                        new
                        {
                            Id = 38,
                            CareInstructions = "Hand wash only",
                            Color = "Black",
                            CountryOfOrigin = "Vietnam",
                            Fit = "Relaxed",
                            Gender = "Female",
                            Material = "Nylon",
                            ProductId = 40,
                            SizeGuideUrl = "https://www.nike.com/size-fit",
                            Style = "Windbreaker",
                            Weight = 0.45m
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductPromotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The promotion identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpDate")
                        .HasColumnType("datetime2")
                        .HasComment("The promotion date of expire");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether the promotion is currently active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Marketing label or title for the promotion");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("PromotionPrice")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("The promotion price");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 8, 6, 13, 38, 44, 589, DateTimeKind.Utc).AddTicks(5658))
                        .HasComment("The promotion start date");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsPromotions", t =>
                        {
                            t.HasComment("The promotions in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product rating identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Rating creation date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasComment("Rating value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProductId", "UserId")
                        .IsUnique();

                    b.ToTable("ProductsRatings", t =>
                        {
                            t.HasComment("The Products ratings in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Product review identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Product review content");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETDATE()")
                        .HasComment("Product Review Creation date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("DATETIME2")
                        .HasComment("Product Review UpdatedAt timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId", "ProductId")
                        .IsUnique();

                    b.ToTable("ProductReviews", t =>
                        {
                            t.HasComment("The Product Reviews in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.RecentlyViewedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The RecentlyViewed Product identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("datetime2")
                        .HasComment("The RecentlyViewed Product creation date");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("RecentlyViewedProducts", t =>
                        {
                            t.HasComment("The Recently(lastly) viewed products in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Shopping cart identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Shopping cart creation date");

                    b.Property<string>("GuestId")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique identifier for guest users");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ShoppingCarts", t =>
                        {
                            t.HasComment("Shopping carts in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Shopping cart item identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComment("Shopping cart item current price");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Shopping cart item size");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Shopping cart item quantity");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("DECIMAL(18,2)")
                        .HasComputedColumnSql("[Price] * [Quantity]")
                        .HasComment("Shopping cart item total price");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartsItems", t =>
                        {
                            t.HasComment("Shopping cart items in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The Wishlist Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wishlists", t =>
                        {
                            t.HasComment("The Wishlist in the store");
                        });
                });

            modelBuilder.Entity("OnlineStore.Data.Models.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The WishlistItem Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2")
                        .HasComment("The WishlistItem created date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The WishlistItem notes");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasComment("The WishlistItem quantity");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistsItems", t =>
                        {
                            t.HasComment("The wishlists items in the store");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Address", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Address", "DefaultBillingAddress")
                        .WithMany("BillingAddressUsers")
                        .HasForeignKey("DefaultBillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Data.Models.PaymentDetails", "DefaultPaymentDetails")
                        .WithMany("DetailsUsers")
                        .HasForeignKey("DefaultPaymentDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Data.Models.PaymentMethod", "DefaultPaymentMethod")
                        .WithMany("MethodUsers")
                        .HasForeignKey("DefaultPaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Data.Models.Address", "DefaultShippingAddress")
                        .WithMany("ShippingAddressUsers")
                        .HasForeignKey("DefaultShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DefaultBillingAddress");

                    b.Navigation("DefaultPaymentDetails");

                    b.Navigation("DefaultPaymentMethod");

                    b.Navigation("DefaultShippingAddress");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Article", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OnlineStore.Data.Models.ArticleCategory", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Checkout", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Address", "BillingAddress")
                        .WithMany("BillingAddressCheckouts")
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Data.Models.PaymentDetails", "PaymentDetails")
                        .WithOne("Checkout")
                        .HasForeignKey("OnlineStore.Data.Models.Checkout", "PaymentDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Checkouts")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.Address", "ShippingAddress")
                        .WithMany("ShippingAddressCheckouts")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OnlineStore.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Checkouts")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithMany("Checkouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BillingAddress");

                    b.Navigation("PaymentDetails");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ShippingAddress");

                    b.Navigation("ShoppingCart");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Order", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Address", "BillingAddress")
                        .WithMany("BillingAddressOrders")
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.Checkout", "Checkout")
                        .WithOne("Order")
                        .HasForeignKey("OnlineStore.Data.Models.Order", "CheckoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.Address", "ShippingAddress")
                        .WithMany("ShippingAddressOrders")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BillingAddress");

                    b.Navigation("Checkout");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.PaymentDetails", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Order", "Order")
                        .WithOne("PaymentDetails")
                        .HasForeignKey("OnlineStore.Data.Models.PaymentDetails", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Product", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OnlineStore.Data.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductCategory", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ProductCategory", "ParentCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductDetails", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithOne("ProductDetails")
                        .HasForeignKey("OnlineStore.Data.Models.ProductDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductPromotion", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithMany("Promotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductRating", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithMany("ProductRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductReview", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.RecentlyViewedProduct", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithMany("RecentlyViewedProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ShoppingCart", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("OnlineStore.Data.Models.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Wishlist", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.ApplicationUser", "User")
                        .WithOne("Wishlist")
                        .HasForeignKey("OnlineStore.Data.Models.Wishlist", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.WishlistItem", b =>
                {
                    b.HasOne("OnlineStore.Data.Models.Product", "Product")
                        .WithMany("WishlistItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Data.Models.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Address", b =>
                {
                    b.Navigation("BillingAddressCheckouts");

                    b.Navigation("BillingAddressOrders");

                    b.Navigation("BillingAddressUsers");

                    b.Navigation("ShippingAddressCheckouts");

                    b.Navigation("ShippingAddressOrders");

                    b.Navigation("ShippingAddressUsers");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Articles");

                    b.Navigation("Checkouts");

                    b.Navigation("Orders");

                    b.Navigation("ProductRatings");

                    b.Navigation("ProductReviews");

                    b.Navigation("RecentlyViewedProducts");

                    b.Navigation("ShoppingCart")
                        .IsRequired();

                    b.Navigation("Wishlist")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ArticleCategory", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Checkout", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.PaymentDetails", b =>
                {
                    b.Navigation("Checkout")
                        .IsRequired();

                    b.Navigation("DetailsUsers");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.PaymentMethod", b =>
                {
                    b.Navigation("Checkouts");

                    b.Navigation("MethodUsers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductDetails")
                        .IsRequired();

                    b.Navigation("ProductRatings");

                    b.Navigation("ProductReviews");

                    b.Navigation("Promotions");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.ShoppingCart", b =>
                {
                    b.Navigation("Checkouts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("OnlineStore.Data.Models.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
